---
import fs from 'node:fs'
import { join as pathJoin } from 'path'

import * as matter from 'gray-matter'
// @ts-ignore
import { Card, Pagination } from 'accessible-astro-components'

import type { Posts, AstroGetStaticPathsParams } from '@interfaces/index'
import DefaultLayout from '@layouts/DefaultLayout.astro'

export async function getStaticPaths({ paginate }: AstroGetStaticPathsParams) {
  const articleDir = pathJoin(process.cwd(), 'src/content')

  const yearCategories = fs
    .readdirSync(pathJoin(articleDir))
    .filter((item) => fs.lstatSync(pathJoin(articleDir, item)).isDirectory())
    .map((item) => ({ year: item, url: `/blog/${item}` }))
    .reverse()

  const staticPaths = yearCategories
    .filter((category) => {
      const postFiles = fs
        .readdirSync(pathJoin(articleDir, category.year))
        .filter((file) => file.split('.')[1] === 'md')
      if (postFiles.length) {
        return true
      }
    })
    .map((category) => {
      const postFiles = fs
        .readdirSync(pathJoin(articleDir, category.year))
        .filter((file) => file.split('.')[1] === 'md')
        .reverse()
      const posts = postFiles.map((postFilename) => {
        const post = matter.default(fs.readFileSync(pathJoin(articleDir, category.year, postFilename))).data
        return {
          slug: `/blog/${category.year}/${post.slug}`,
          title: post.title.slice(0, 30) + '...',
          cover: post.cover,
          description: `${post.description.slice(0, 100)}...`,
          date: new Date(post.date).toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' }),
        }
      })
      return paginate?.(posts, { params: { year: category.year }, pageSize: 6 })
    })

  return staticPaths
}

const { page } = Astro.props
const { year } = Astro.params
---

<DefaultLayout
  title="Blog"
  description="An example of a blog with dynamic content fetched from JSONPlaceholder using the title, body and userId."
>
  <section>
    <div class="space-content container">
      <h1>{year}</h1>
    </div>
    <section class="my-12">
      <div class="container">
        <p class="text-sm"><em>Post {page.start + 1} through {page.end + 1} of {page.total} total posts</em></p>
        <ul class="my-3">
          {
            page.data.map((post: Posts) => (
              <li>
                <Card url={post.slug} title={post.title} img={post.cover} footer={post.date}>
                  {post.description}
                </Card>
              </li>
            ))
          }
        </ul>
        <div class="mt-12 grid place-content-center">
          <Pagination
            firstPage={page.url.prev ? `/blog/${year}` : null}
            previousPage={page.url.prev ? page.url.prev : null}
            nextPage={page.url.next ? page.url.next : null}
            lastPage={page.url.next ? `/blog/${year}/${Math.round(page.total / page.size) + 1}` : null}
            currentPage={page.currentPage}
            totalPages={Math.round(page.total / page.size)}
          />
        </div>
      </div>
    </section>
  </section>
</DefaultLayout>

<style lang="scss">
  ul {
    display: grid;
    grid-template-columns: 1fr;
    grid-gap: 4rem;

    @media (min-width: 550px) {
      grid-template-columns: repeat(2, 1fr);
      grid-gap: 2rem;
    }

    @media (min-width: 950px) {
      grid-template-columns: repeat(3, 1fr);
    }
  }
</style>
